import pytest

from StringUtils import StringUtils

StringUtils = StringUtils()

#–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç
#Positive test

@pytest.mark.parametrize('input_str, result', [("alex", "Alex"), ("aLEX", "ALEX"), ( "–Ω–∞—Å—Ç—è", "–ù–∞—Å—Ç—è"), ("ALEX", "ALEX"), ("Œ≥œÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ", "ŒìœÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ")])
def test_capitilize_positive(input_str, result):
    assert StringUtils.capitilize(input_str) == result

#Negative test

@pytest.mark.parametrize('input_str, result', [("_alex", "_alex"), (" alex", " alex"), ( "159", "159"), ("_", "_")])
def test_capitilize_negative(input_str, result):
    assert StringUtils.capitilize(input_str) == result

#–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
#Positive test

@pytest.mark.parametrize('input_str, result', [(" alex", "alex"), (" ALEX", "ALEX"), ( " –Ω–∞—Å—Ç—è", "–Ω–∞—Å—Ç—è"), (" Œ≥œÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ", "Œ≥œÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ"), (" ", ""), (" _", "_")])
def test_trim_positive(input_str, result):
    assert StringUtils.trim(input_str) == result

#Negative test

@pytest.mark.parametrize('input_str, result', [(" 159", "159"),  ( " üòâ", "üòâ")])
def test_trim_negative(input_str, result):
    assert StringUtils.trim(input_str) == result

#–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
#Positive test

@pytest.mark.parametrize('input_str, input_del, result', [("ALEX,–Ω–∞—Å—Ç—è,ŒìœÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ,g", ",", ["ALEX", "–Ω–∞—Å—Ç—è", "ŒìœÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ", "g"]),("1:5,2:9,0", ":", ["1", "5,2", "9,0"])])
def test_to_list_positive(input_str, input_del, result):
    assert StringUtils.to_list(input_str, input_del) == result

# Negative test

@pytest.mark.parametrize('input_str, input_del, result', [("üòâ,$,+", ",", ["üòâ", "$", "+"])])
def test_to_list_negative(input_str, input_del, result):
    assert StringUtils.to_list(input_str, input_del) == result

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç
# Positive test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 's', True), ('arishek', 'o', False)])
def test_contains_positive(input_str, input_symbol, result):
    assert StringUtils.contains(input_str, input_symbol) == result

# Negative test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 'S', False), ('arishOk', '0', False), ('arish–µk', 'e', False)])
def test_contains_negative(input_str, input_symbol, result):
    assert StringUtils.contains(input_str, input_symbol) == result

#–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
# Positive test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 'ari', 'shek'), ('arishOk', 'Ok', 'arish'), ('Œ≥œÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ', 'Œ≥Œµ', 'Œ≥œÅŒµœÉŒ∫ŒπŒπ')])
def test_delete_symbol_positive(input_str, input_symbol, result):
    assert StringUtils.delete_symbol(input_str, input_symbol) == result

# Negative test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 'ak', 'rishe'), ('Œ≥œÅŒµŒ≥ŒµœÉŒ∫ŒπŒπ', 'Œ≥Œµ', 'œÅœÉŒ∫ŒπŒπ')])
def test_delete_symbol_negative(input_str, input_symbol, result):
    assert StringUtils.delete_symbol(input_str, input_symbol) == result

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç
# Positive test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 'a', True), ('arishek', 'r', False), (' arishek', ' ', True), (' arishek', 'a', False)])
def test_starts_with_positive(input_str, input_symbol, result):
    assert StringUtils.starts_with(input_str, input_symbol) == result

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –∏`False` - –µ—Å–ª–∏ –Ω–µ—Ç
# Positive test

@pytest.mark.parametrize('input_str, input_symbol, result', [('arishek', 'k', True), ('arishek', 'r', False), ('arishek ', ' ', True), ('arishek ', 'k', False)])
def test_end_with_positive(input_str, input_symbol, result):
    assert StringUtils.end_with(input_str, input_symbol) == result

#–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç
# Positive test

@pytest.mark.parametrize('input_str, result', [('', True), (' ', True), ('arishek ', False), ('_', False)])
def test_is_empty_positive(input_str, result):
    assert StringUtils.is_empty(input_str) == result

#–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
# Positive test

@pytest.mark.parametrize('input_list, input_joiner, result', [(["a", "ag", "aga"], "*",  "a, ag, aga"), (["a"], ", ", "a"),
    ([], ", ", ""),])
def test_list_to_string_positive(input_list, input_joiner, result):
   assert StringUtils.list_to_string(input_list, input_joiner) == result
